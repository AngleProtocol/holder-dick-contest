{
  "address": "0xE77eDd217c589AbA9887eDF802e8eBe0a57a0578",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "_coreBorrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "param",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        }
      ],
      "name": "FiledUint64",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "fees",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "vestingPeriod",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "name": "NewHDCContract",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "coreBorrow",
      "outputs": [
        {
          "internalType": "contract ICoreBorrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "fees",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "vestingPeriod",
          "type": "uint64"
        }
      ],
      "name": "deployHDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHDCContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "fees",
          "type": "uint64"
        }
      ],
      "name": "getHDCAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hdcContractList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "hdcFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "supportedFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "supportedVestingPeriods",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "param",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "what",
          "type": "bytes32"
        }
      ],
      "name": "toggleUint64",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2392c51407e31571b1cd3ef1a05ccea910463d06bfb6c0f951d73fb9f8486bf4",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xE77eDd217c589AbA9887eDF802e8eBe0a57a0578",
    "transactionIndex": 0,
    "gasUsed": "2687973",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000880000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000004000000000000000000000000000000000000002000000000000000000000000200000000000000000000000000000000000000000000000000000000000005000000000000000000001000000000000000800000000000000100000000000000000000000000000000000000000000000000000000000000000800000100000",
    "blockHash": "0x20374320e1ed62b0fff7b78133c8a5deb1d14737ef48308adec221709cc71566",
    "transactionHash": "0x2392c51407e31571b1cd3ef1a05ccea910463d06bfb6c0f951d73fb9f8486bf4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33842624,
        "transactionHash": "0x2392c51407e31571b1cd3ef1a05ccea910463d06bfb6c0f951d73fb9f8486bf4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fda462548ce04282f4b6d6619823a7c64fdc0185",
          "0x0000000000000000000000003aeb7722c208c8f35fef5ec4f2ebf887beb59360"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000775eb70bbecd97a0000000000000000000000000000000000000000000000018cee5419fce2a2440000000000000000000000000000000000000000000002663c85fd997587d79f000000000000000000000000000000000000000000000001857868a940f5c8ca00000000000000000000000000000000000000000000026643fbe90a3174b119",
        "logIndex": 0,
        "blockHash": "0x20374320e1ed62b0fff7b78133c8a5deb1d14737ef48308adec221709cc71566"
      }
    ],
    "blockNumber": 33842624,
    "cumulativeGasUsed": "2687973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78754109cb73772d70A6560297037657C2AF51b8"
  ],
  "numDeployments": 2,
  "solcInputHash": "cab971c0f8374c68a2ad7bb26b8f6428",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"_coreBorrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"param\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"FiledUint64\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"fees\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"vestingPeriod\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"name\":\"NewHDCContract\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"coreBorrow\",\"outputs\":[{\"internalType\":\"contract ICoreBorrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"fees\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vestingPeriod\",\"type\":\"uint64\"}],\"name\":\"deployHDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHDCContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"fees\",\"type\":\"uint64\"}],\"name\":\"getHDCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hdcContractList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"hdcFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"supportedFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"supportedVestingPeriods\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"param\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"}],\"name\":\"toggleUint64\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Core Team\",\"kind\":\"dev\",\"methods\":{\"getAllHDCContracts()\":{\"details\":\"Helper for UIs\"}},\"title\":\"HDCFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"coreBorrow()\":{\"notice\":\"Address used for Access control\"},\"deployHDC(address,uint64,uint64)\":{\"notice\":\"Deploys a HDC contract for `asset` with withdrawal fees of `fees` and a vesting period of `vestingPeriod`\"},\"getAllHDCContracts()\":{\"notice\":\"Returns all the HDC contracts\"},\"getHDCAddress(address,uint64)\":{\"notice\":\"Get the HDC contract address associated to the pair (`asset`, `fees`)\"},\"hdcContractList(uint256)\":{\"notice\":\"List of all HDC contract addresses\"},\"hdcFactory(address,uint64)\":{\"notice\":\"Maps pairs of (asset address, fee value) to the address of the corresponding holder dick contest\"},\"supportedFees(uint64)\":{\"notice\":\"Maps a fee value to whether it is supported or not\"},\"supportedVestingPeriods(uint64)\":{\"notice\":\"Maps a vesting period to whether it is supported or not\"},\"toggleUint64(uint64,bytes32)\":{\"notice\":\"Toggles support for a fee or a vesting period\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HDCFactory.sol\":\"HDCFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\",\"keccak256\":\"0x687142c633b33037c3137b6bfeef848a44eb1ef83fb5fdb59a3affdf28a46516\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * CAUTION: Deposits and withdrawals may incur unexpected slippage. Users should verify that the amount received of\\n * shares or assets is as expected. EOAs should operate through a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20Metadata private immutable _asset;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20Metadata asset_) {\\n        _asset = asset_;\\n    }\\n\\n    /** @dev See {IERC4262-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4262-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4262-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256 shares) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256 assets) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return _isVaultCollateralized() ? type(uint256).max : 0;\\n    }\\n\\n    /** @dev See {IERC4262-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4262-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4262-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4262-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4262-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4262-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4262-mint}. */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4262-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4262-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     *\\n     * Will revert if assets > 0, totalSupply > 0 and totalAssets = 0. That corresponds to a case where any asset\\n     * would represent an infinite amout of shares.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256 shares) {\\n        uint256 supply = totalSupply();\\n        return\\n            (assets == 0 || supply == 0)\\n                ? assets.mulDiv(10**decimals(), 10**_asset.decimals(), rounding)\\n                : assets.mulDiv(supply, totalAssets(), rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256 assets) {\\n        uint256 supply = totalSupply();\\n        return\\n            (supply == 0)\\n                ? shares.mulDiv(10**_asset.decimals(), 10**decimals(), rounding)\\n                : shares.mulDiv(totalAssets(), supply, rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reenterancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transfered and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transfered, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _isVaultCollateralized() private view returns (bool) {\\n        return totalAssets() > 0 || totalSupply() == 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5b2776d0bca58b68e2f78eed93bfdbae602d54e9f7b0509a960064e173e7da7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/HDCFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\n\\nimport \\\"./interfaces/ICoreBorrow.sol\\\";\\nimport \\\"./HolderDickContestERC20.sol\\\";\\n\\n/// @title HDCFactory\\n/// @author Angle Core Team\\ncontract HDCFactory {\\n    uint256 internal constant _BASE_PARAMS = 10**9;\\n\\n    // ================================== Errors ===================================\\n\\n    error InvalidCall();\\n    error InvalidParam();\\n    error NotGovernorOrGuardian();\\n    error ZeroAddress();\\n\\n    // =============================== Event =======================================\\n\\n    event FiledUint64(uint64 param, bytes32 what);\\n    event NewHDCContract(address indexed asset, uint64 fees, uint64 vestingPeriod, address indexed deploymentAddress);\\n\\n    // =============================== Parameters ==================================\\n\\n    /// @notice Address used for Access control\\n    ICoreBorrow public coreBorrow;\\n\\n    /// @notice Maps pairs of (asset address, fee value) to the address of the corresponding\\n    /// holder dick contest\\n    mapping(address => mapping(uint64 => address)) public hdcFactory;\\n\\n    /// @notice Maps a fee value to whether it is supported or not\\n    mapping(uint64 => bool) public supportedFees;\\n\\n    /// @notice Maps a vesting period to whether it is supported or not\\n    mapping(uint64 => bool) public supportedVestingPeriods;\\n\\n    /// @notice List of all HDC contract addresses\\n    address[] public hdcContractList;\\n\\n    /// @notice Checks whether the `msg.sender` has the governor or guardian role or not\\n    modifier onlyGovernorOrGuardian() {\\n        if (!coreBorrow.isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    constructor(ICoreBorrow _coreBorrow) {\\n        if (address(_coreBorrow) == address(0)) revert ZeroAddress();\\n        coreBorrow = _coreBorrow;\\n        supportedVestingPeriods[24 * 3600] = true;\\n        supportedFees[10000000] = true;\\n    }\\n\\n    /// @notice Deploys a HDC contract for `asset` with withdrawal fees of `fees` and a vesting period of\\n    /// `vestingPeriod`\\n    function deployHDC(\\n        address asset,\\n        uint64 fees,\\n        uint64 vestingPeriod\\n    ) external returns (address deployed) {\\n        if (hdcFactory[asset][fees] != address(0) || !supportedFees[fees] || !supportedVestingPeriods[vestingPeriod])\\n            revert InvalidCall();\\n        deployed = address(new HolderDickContestERC20(IERC20Metadata(asset), fees, vestingPeriod));\\n        hdcFactory[asset][fees] = deployed;\\n        hdcContractList.push(deployed);\\n        emit NewHDCContract(asset, fees, vestingPeriod, deployed);\\n    }\\n\\n    // ============================ Helper View Functions ==========================\\n\\n    /// @notice Get the HDC contract address associated to the pair (`asset`, `fees`)\\n    function getHDCAddress(address asset, uint64 fees) external view returns (address) {\\n        return hdcFactory[asset][fees];\\n    }\\n\\n    /// @notice Returns all the HDC contracts\\n    /// @dev Helper for UIs\\n    function getAllHDCContracts() external view returns (address[] memory) {\\n        return hdcContractList;\\n    }\\n\\n    // ============================ Governance Function ============================\\n\\n    /// @notice Toggles support for a fee or a vesting period\\n    function toggleUint64(uint64 param, bytes32 what) external onlyGovernorOrGuardian {\\n        bool status;\\n        if (what == \\\"F\\\") {\\n            if (param > _BASE_PARAMS) revert InvalidParam();\\n            status = supportedFees[param];\\n            supportedFees[param] = !status;\\n        } else if (what == \\\"V\\\") {\\n            if (param == 0) revert InvalidParam();\\n            status = supportedVestingPeriods[param];\\n            supportedVestingPeriods[param] = !status;\\n        } else revert InvalidParam();\\n        emit FiledUint64(param, what);\\n    }\\n}\\n\",\"keccak256\":\"0xcfd3c87238ecd829c6a177995996dc06e39d3e4720a74f02beea99bbccdb682e\",\"license\":\"GPL-3.0\"},\"contracts/HolderDickContestERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @title HolderDickContestERC20\\n/// @author Angle Core Team\\ncontract HolderDickContestERC20 is ERC4626 {\\n    using Math for uint256;\\n\\n    uint256 internal constant _BASE_PARAMS = 10**9;\\n\\n    // ============================ Contract Parameters ============================\\n\\n    /// @notice Fee paid by users withdrawing from the contract\\n    uint64 public withdrawFee;\\n\\n    /// @notice The period in seconds over which locked profit is unlocked\\n    /// @dev If 0, it can open this contract up to sandwich attacks\\n    uint64 public vestingPeriod;\\n\\n    // ============================ Contract Variables =============================\\n\\n    /// @notice Timestamp of the last gain for users\\n    uint64 public lastUpdate;\\n\\n    /// @notice Amount of profit that needs to be vested\\n    uint256 public vestingProfit;\\n\\n    constructor(\\n        IERC20Metadata _asset,\\n        uint64 _withdrawFee,\\n        uint64 _vestingPeriod\\n    )\\n        ERC4626(_asset)\\n        ERC20(\\n            string(abi.encodePacked(_asset.name(), \\\" Holder Dick Contest\\\")),\\n            string(abi.encodePacked(_asset.symbol(), \\\"-hdc\\\"))\\n        )\\n    {\\n        withdrawFee = _withdrawFee;\\n        vestingPeriod = _vestingPeriod;\\n    }\\n\\n    // ============================== View Functions ===============================\\n\\n    /// @inheritdoc ERC4626\\n    function totalAssets() public view override returns (uint256) {\\n        return IERC20(asset()).balanceOf(address(this)) - lockedProfit();\\n    }\\n\\n    /// @inheritdoc ERC4626\\n    function maxWithdraw(address owner) public view override returns (uint256) {\\n        (uint256 maxAsset, ) = _computeRedemptionFees(balanceOf(owner));\\n        return maxAsset;\\n    }\\n\\n    /// @inheritdoc ERC4626\\n    function previewWithdraw(uint256 assets) public view override returns (uint256) {\\n        (uint256 shares, ) = _computeWithdrawalFees(assets);\\n        return shares;\\n    }\\n\\n    /// @inheritdoc ERC4626\\n    function previewRedeem(uint256 shares) public view override returns (uint256) {\\n        (uint256 assets, ) = _computeRedemptionFees(shares);\\n        return assets;\\n    }\\n\\n    /// @notice Computes the current amount of locked profit\\n    /// @dev This function is what effectively vests profits going to remaining users\\n    /// @dev Vesting profit reduces profitability of sandwich attacks\\n    function lockedProfit() public view virtual returns (uint256) {\\n        // Getting the last update and vesting period\\n        uint256 _lastUpdate = lastUpdate;\\n        uint256 _vestingPeriod = vestingPeriod;\\n\\n        unchecked {\\n            // If the vesting period has passed, there is no locked profit\\n            // This cannot overflow on human timescales\\n            if (block.timestamp >= _lastUpdate + _vestingPeriod) return 0;\\n\\n            uint256 currentlyVestingProfit = vestingProfit;\\n\\n            // Computing how much profit remains locked based on the last time a profit was acknowledged and the vesting period\\n            return currentlyVestingProfit - (currentlyVestingProfit * (block.timestamp - _lastUpdate)) / _vestingPeriod;\\n        }\\n    }\\n\\n    // ============================= User Interactions =============================\\n\\n    /// @inheritdoc ERC4626\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n        return shares;\\n    }\\n\\n    /// @inheritdoc ERC4626\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n        return assets;\\n    }\\n\\n    /// @inheritdoc ERC4626\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        (uint256 shares, uint256 fees) = _computeWithdrawalFees(assets);\\n        _handleUserGain(fees);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n        return shares;\\n    }\\n\\n    /// @inheritdoc ERC4626\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        (uint256 assets, uint256 fees) = _computeRedemptionFees(shares);\\n        _handleUserGain(fees);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n        return assets;\\n    }\\n\\n    // ================================= Helpers ===================================\\n\\n    /// @notice Splits the fees paid by someone withdrawing to all users\\n    /// @param fees Fees paid by a user withdrawing\\n    function _handleUserGain(uint256 fees) internal virtual {\\n        if (fees > 0) {\\n            vestingProfit = (lockedProfit() + fees);\\n            lastUpdate = uint64(block.timestamp);\\n        }\\n    }\\n\\n    /// @notice Computes the fees paid and the shares burnt for a withdrawal of `assets`\\n    function _computeWithdrawalFees(uint256 assets) internal view returns (uint256 shares, uint256 fees) {\\n        uint256 assetsPlusFees = assets.mulDiv(_BASE_PARAMS, _BASE_PARAMS - withdrawFee, Math.Rounding.Up);\\n        shares = _convertToShares(assetsPlusFees, Math.Rounding.Up);\\n        fees = assetsPlusFees - assets;\\n    }\\n\\n    /// @notice Computes the fees paid and the assets redeemed for a redemption of `shares`\\n    function _computeRedemptionFees(uint256 shares) internal view returns (uint256 assets, uint256 fees) {\\n        assets = _convertToAssets(shares, Math.Rounding.Down);\\n        fees = assets.mulDiv(withdrawFee, _BASE_PARAMS, Math.Rounding.Up);\\n        assets -= fees;\\n    }\\n}\\n\",\"keccak256\":\"0xc6f4326102986bc5a1c2680fc65b25bd5269c232674b805de0a723df38346028\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\ninterface ICoreBorrow {\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa6f158ba70dae73d9e1b455925cde7b83e3ad2f77e0913cd203b29d326f63d35\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612fd2380380612fd283398101604081905261002f916100e1565b6001600160a01b0381166100565760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03929092169190911781557fd269868a1917d972243cf7d1ad5974038cb7f908f488a91a39256a112f1e479f805460ff1990811660019081179092556298968090925260026020527fd06adf0cc4b0d64f4fdd2c7cb9085f20e7ba8f62a877ca7e318f4d430dcb1d658054909216179055610111565b6000602082840312156100f357600080fd5b81516001600160a01b038116811461010a57600080fd5b9392505050565b612eb2806101206000396000f3fe60806040523480156200001157600080fd5b5060043610620000b05760003560e01c8063a7efec71116200007f578063d473f9871162000062578063d473f98714620001a6578063e056975714620001f8578063e059544c146200020f57600080fd5b8063a7efec711462000169578063cef65f5e146200018057600080fd5b80631b0c24d514620000b55780634552e43e146200010057806387f073dd1462000119578063a39e9af61462000150575b600080fd5b600054620000d69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620001176200011136600462000805565b62000253565b005b6200013f6200012a36600462000832565b60026020526000908152604090205460ff1681565b6040519015158152602001620000f7565b6200015a6200051e565b604051620000f7919062000857565b620000d66200017a366004620008b3565b6200058f565b6200013f6200019136600462000832565b60036020526000908152604090205460ff1681565b620000d6620001b7366004620008f2565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832067ffffffffffffffff94909416835292905220541690565b620000d6620002093660046200092a565b620005c7565b620000d662000220366004620008f2565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6000546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015620002c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e8919062000974565b6200031f576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000817f46000000000000000000000000000000000000000000000000000000000000001415620003e657633b9aca008367ffffffffffffffff16111562000393576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5067ffffffffffffffff8216600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff909116801591909117909155620004d6565b817f56000000000000000000000000000000000000000000000000000000000000001415620004a45767ffffffffffffffff831662000451576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5067ffffffffffffffff8216600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff909116801591909117909155620004d6565b6040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805167ffffffffffffffff85168152602081018490527f13b367dac93b85d1ed9b3d8961d8b48e1a677c9800bb1613b4b0416b2d5b61d0910160405180910390a1505050565b606060048054806020026020016040519081016040528092919081815260200182805480156200058557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162000559575b5050505050905090565b60048181548110620005a057600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260016020908152604080832067ffffffffffffffff871684529091528120549091161515806200062e575067ffffffffffffffff831660009081526002602052604090205460ff16155b8062000654575067ffffffffffffffff821660009081526003602052604090205460ff16155b156200068c576040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383836040516200069d90620007d9565b73ffffffffffffffffffffffffffffffffffffffff909316835267ffffffffffffffff9182166020840152166040820152606001604051809103906000f080158015620006ee573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff858116600081815260016020818152604080842067ffffffffffffffff8b81168087529184528286208054988a167fffffffffffffffffffffffff0000000000000000000000000000000000000000998a1681179091556004805496870181559096527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909401805490971685179096558051958652918816908501529394509290917ff10b98330449aa15687f8e6076a50279b08f168fa376f23bc6dfe35356f94264910160405180910390a39392505050565b6124e4806200099983390190565b803567ffffffffffffffff811681146200080057600080fd5b919050565b600080604083850312156200081957600080fd5b6200082483620007e7565b946020939093013593505050565b6000602082840312156200084557600080fd5b6200085082620007e7565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620008a757835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000873565b50909695505050505050565b600060208284031215620008c657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146200080057600080fd5b600080604083850312156200090657600080fd5b6200091183620008cd565b91506200092160208401620007e7565b90509250929050565b6000806000606084860312156200094057600080fd5b6200094b84620008cd565b92506200095b60208501620007e7565b91506200096b60408501620007e7565b90509250925092565b6000602082840312156200098757600080fd5b815180151581146200085057600080fdfe60a06040523480156200001157600080fd5b50604051620024e4380380620024e4833981016040819052620000349162000282565b82836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200009e919081019062000322565b604051602001620000b09190620003da565b604051602081830303815290604052846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000128919081019062000322565b6040516020016200013a91906200041d565b60408051601f1981840301815291905281516200015f906003906020850190620001bf565b50805162000175906004906020840190620001bf565b5050506001600160a01b0316608052600580546001600160401b0392831668010000000000000000026001600160801b031990911692909316919091179190911790555062000484565b828054620001cd9062000447565b90600052602060002090601f016020900481019282620001f157600085556200023c565b82601f106200020c57805160ff19168380011785556200023c565b828001600101855582156200023c579182015b828111156200023c5782518255916020019190600101906200021f565b506200024a9291506200024e565b5090565b5b808211156200024a57600081556001016200024f565b80516001600160401b03811681146200027d57600080fd5b919050565b6000806000606084860312156200029857600080fd5b83516001600160a01b0381168114620002b057600080fd5b9250620002c06020850162000265565b9150620002d06040850162000265565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200030c578181015183820152602001620002f2565b838111156200031c576000848401525b50505050565b6000602082840312156200033557600080fd5b81516001600160401b03808211156200034d57600080fd5b818401915084601f8301126200036257600080fd5b815181811115620003775762000377620002d9565b604051601f8201601f19908116603f01168101908382118183101715620003a257620003a2620002d9565b81604052828152876020848701011115620003bc57600080fd5b620003cf836020830160208801620002ef565b979650505050505050565b60008251620003ee818460208701620002ef565b7f20486f6c646572204469636b20436f6e74657374000000000000000000000000920191825250601401919050565b6000825162000431818460208701620002ef565b632d68646360e01b920191825250600401919050565b600181811c908216806200045c57607f821691505b602082108114156200047e57634e487b7160e01b600052602260045260246000fd5b50919050565b608051612021620004c3600039600081816102b20152818161051c01528181610a04015281816110ad0152818161120801526112f601526120216000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638c6ea7cd1161010f578063c0463711116100a2578063d905777e11610071578063d905777e146104a3578063dd62ed3e146104b6578063e941fa78146104fc578063ef8b30f71461047d57600080fd5b8063c046371114610422578063c63d75b61461044a578063c6e6f5921461047d578063ce96cb771461049057600080fd5b8063a9059cbb116100de578063a9059cbb146103d6578063b3d7f6b9146103e9578063b460af94146103fc578063ba0876521461040f57600080fd5b80638c6ea7cd1461039f57806394bf804d146103a857806395d89b41146103bb578063a457c2d7146103c357600080fd5b806338d52e0f116101875780634cdad506116101565780634cdad5061461030a5780636e553f651461031d57806370a08231146103305780637313ee5a1461036657600080fd5b806338d52e0f1461029857806339509351146102dc578063402d267d146102ef57806344b813961461030257600080fd5b80630a28a477116101c35780630a28a4771461025b57806318160ddd1461026e57806323b872dd14610276578063313ce5671461028957600080fd5b806301e1d114146101f557806306fdde031461021057806307a2d13a14610225578063095ea7b314610238575b600080fd5b6101fd610510565b6040519081526020015b60405180910390f35b6102186105da565b6040516102079190611b8c565b6101fd610233366004611bdd565b61066c565b61024b610246366004611c1f565b61067f565b6040519015158152602001610207565b6101fd610269366004611bdd565b610697565b6002546101fd565b61024b610284366004611c49565b6106ab565b60405160128152602001610207565b60405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610207565b61024b6102ea366004611c1f565b6106d1565b6101fd6102fd366004611c85565b61071d565b6101fd610759565b6101fd610318366004611bdd565b6107bf565b6101fd61032b366004611ca0565b6107cb565b6101fd61033e366004611c85565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6005546103869068010000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610207565b6101fd60065481565b6101fd6103b6366004611ca0565b6107e5565b6102186107ff565b61024b6103d1366004611c1f565b61080e565b61024b6103e4366004611c1f565b6108ef565b6101fd6103f7366004611bdd565b6108fd565b6101fd61040a366004611ccc565b61090a565b6101fd61041d366004611ccc565b61093b565b60055461038690700100000000000000000000000000000000900467ffffffffffffffff1681565b6101fd610458366004611c85565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b6101fd61048b366004611bdd565b610963565b6101fd61049e366004611c85565b610970565b6101fd6104b1366004611c85565b6109a7565b6101fd6104c4366004611d08565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6005546103869067ffffffffffffffff1681565b600061051a610759565b7f00000000000000000000000000000000000000000000000000000000000000006040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190611d32565b6105d59190611d7a565b905090565b6060600380546105e990611d91565b80601f016020809104026020016040519081016040528092919081815260200182805461061590611d91565b80156106625780601f1061063757610100808354040283529160200191610662565b820191906000526020600020905b81548152906001019060200180831161064557829003601f168201915b5050505050905090565b60006106798260006109d2565b92915050565b60003361068d818585610abb565b5060019392505050565b6000806106a383610c6e565b509392505050565b6000336106b9858285610cc1565b6106c4858585610d98565b60019150505b9392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061068d9082908690610718908790611de5565b610abb565b600061072761104b565b610732576000610679565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b60055460009067ffffffffffffffff700100000000000000000000000000000000820481169168010000000000000000900416808201421061079e5760009250505090565b60065481428490038202816107b5576107b5611dfd565b0490039392505050565b6000806106a383611065565b6000806107d784610963565b90506106ca338486846110a8565b6000806107f1846108fd565b90506106ca338483876110a8565b6060600480546105e990611d91565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156108d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6108e48286868403610abb565b506001949350505050565b60003361068d818585610d98565b60006106798260016109d2565b600080600061091886610c6e565b9150915061092581611154565b61093233868689866111bb565b50949350505050565b600080600061094986611065565b9150915061095681611154565b610932338686858a6111bb565b60006106798260006112bc565b6000806106a36109a28473ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b611065565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812054610679565b6000806109de60025490565b905080156109ff576109fa6109f1610510565b85908386611383565b610ab3565b610ab37f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611e2c565b610a9c90600a611f6f565b60125b610aaa90600a611f6f565b86919086611383565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8316610b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff8216610c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60055460009081908190610ca090633b9aca0090610c969067ffffffffffffffff1682611d7a565b8691906001611383565b9050610cad8160016112bc565b9250610cb98482611d7a565b915050915091565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d925781811015610d85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108ce565b610d928484848403610abb565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610e3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff8216610ede576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610f94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610fd8908490611de5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161103e91815260200190565b60405180910390a3610d92565b600080611056610510565b11806105d55750506002541590565b6000806110738360006109d2565b60055490925061109590839067ffffffffffffffff16633b9aca006001611383565b90506110a18183611d7a565b9150915091565b6110d47f00000000000000000000000000000000000000000000000000000000000000008530856113e5565b6110de83826114c1565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611146929190918252602082015260400190565b60405180910390a350505050565b80156111b85780611163610759565b61116d9190611de5565b600655600580547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004267ffffffffffffffff16021790555b50565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111f9576111f9838683610cc1565b61120383826115e1565b61122e7f000000000000000000000000000000000000000000000000000000000000000085846117ce565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db85856040516112ad929190918252602082015260400190565b60405180910390a45050505050565b6000806112c860025490565b90508315806112d5575080155b6112e5576109fa81610aaa610510565b610ab36112f46012600a611f6f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e2c565b600080611391868686611824565b905060018360028111156113a7576113a7611f7e565b1480156113c45750600084806113bf576113bf611dfd565b868809115b156113d7576113d4600182611de5565b90505b95945050505050565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610d929085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118f2565b73ffffffffffffffffffffffffffffffffffffffff821661153e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108ce565b80600260008282546115509190611de5565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260408120805483929061158a908490611de5565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216611684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101561173a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290611776908490611d7a565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113e09084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161143f565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561187d5783828161187357611873611dfd565b04925050506106ca565b80841161188957600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611954826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119fe9092919063ffffffff16565b8051909150156113e057808060200190518101906119729190611fad565b6113e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108ce565b6060610ab384846000858573ffffffffffffffffffffffffffffffffffffffff85163b611a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ce565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ab09190611fcf565b60006040518083038185875af1925050503d8060008114611aed576040519150601f19603f3d011682016040523d82523d6000602084013e611af2565b606091505b5091509150611b02828286611b0d565b979650505050505050565b60608315611b1c5750816106ca565b825115611b2c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce9190611b8c565b60005b83811015611b7b578181015183820152602001611b63565b83811115610d925750506000910152565b6020815260008251806020840152611bab816040850160208701611b60565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215611bef57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c1a57600080fd5b919050565b60008060408385031215611c3257600080fd5b611c3b83611bf6565b946020939093013593505050565b600080600060608486031215611c5e57600080fd5b611c6784611bf6565b9250611c7560208501611bf6565b9150604084013590509250925092565b600060208284031215611c9757600080fd5b6106ca82611bf6565b60008060408385031215611cb357600080fd5b82359150611cc360208401611bf6565b90509250929050565b600080600060608486031215611ce157600080fd5b83359250611cf160208501611bf6565b9150611cff60408501611bf6565b90509250925092565b60008060408385031215611d1b57600080fd5b611d2483611bf6565b9150611cc360208401611bf6565b600060208284031215611d4457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611d8c57611d8c611d4b565b500390565b600181811c90821680611da557607f821691505b60208210811415611ddf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115611df857611df8611d4b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060208284031215611e3e57600080fd5b815160ff811681146106ca57600080fd5b600181815b80851115611ea857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611e8e57611e8e611d4b565b80851615611e9b57918102915b93841c9390800290611e54565b509250929050565b600082611ebf57506001610679565b81611ecc57506000610679565b8160018114611ee25760028114611eec57611f08565b6001915050610679565b60ff841115611efd57611efd611d4b565b50506001821b610679565b5060208310610133831016604e8410600b8410161715611f2b575081810a610679565b611f358383611e4f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611f6757611f67611d4b565b029392505050565b60006106ca60ff841683611eb0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215611fbf57600080fd5b815180151581146106ca57600080fd5b60008251611fe1818460208701611b60565b919091019291505056fea2646970667358221220b177bd7d3b8a81355a8f796a397df571979302027f29d59e65283e16cc49b4b264736f6c634300080c0033a26469706673582212206ea310e750a657b3d84483138fece72ddd6608c606f7e2b92ffb6cc71acd42ee64736f6c634300080c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b05760003560e01c8063a7efec71116200007f578063d473f9871162000062578063d473f98714620001a6578063e056975714620001f8578063e059544c146200020f57600080fd5b8063a7efec711462000169578063cef65f5e146200018057600080fd5b80631b0c24d514620000b55780634552e43e146200010057806387f073dd1462000119578063a39e9af61462000150575b600080fd5b600054620000d69073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b620001176200011136600462000805565b62000253565b005b6200013f6200012a36600462000832565b60026020526000908152604090205460ff1681565b6040519015158152602001620000f7565b6200015a6200051e565b604051620000f7919062000857565b620000d66200017a366004620008b3565b6200058f565b6200013f6200019136600462000832565b60036020526000908152604090205460ff1681565b620000d6620001b7366004620008f2565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832067ffffffffffffffff94909416835292905220541690565b620000d6620002093660046200092a565b620005c7565b620000d662000220366004620008f2565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6000546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015620002c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e8919062000974565b6200031f576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000817f46000000000000000000000000000000000000000000000000000000000000001415620003e657633b9aca008367ffffffffffffffff16111562000393576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5067ffffffffffffffff8216600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff909116801591909117909155620004d6565b817f56000000000000000000000000000000000000000000000000000000000000001415620004a45767ffffffffffffffff831662000451576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5067ffffffffffffffff8216600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff909116801591909117909155620004d6565b6040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805167ffffffffffffffff85168152602081018490527f13b367dac93b85d1ed9b3d8961d8b48e1a677c9800bb1613b4b0416b2d5b61d0910160405180910390a1505050565b606060048054806020026020016040519081016040528092919081815260200182805480156200058557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162000559575b5050505050905090565b60048181548110620005a057600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260016020908152604080832067ffffffffffffffff871684529091528120549091161515806200062e575067ffffffffffffffff831660009081526002602052604090205460ff16155b8062000654575067ffffffffffffffff821660009081526003602052604090205460ff16155b156200068c576040517fae962d4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8383836040516200069d90620007d9565b73ffffffffffffffffffffffffffffffffffffffff909316835267ffffffffffffffff9182166020840152166040820152606001604051809103906000f080158015620006ee573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff858116600081815260016020818152604080842067ffffffffffffffff8b81168087529184528286208054988a167fffffffffffffffffffffffff0000000000000000000000000000000000000000998a1681179091556004805496870181559096527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909401805490971685179096558051958652918816908501529394509290917ff10b98330449aa15687f8e6076a50279b08f168fa376f23bc6dfe35356f94264910160405180910390a39392505050565b6124e4806200099983390190565b803567ffffffffffffffff811681146200080057600080fd5b919050565b600080604083850312156200081957600080fd5b6200082483620007e7565b946020939093013593505050565b6000602082840312156200084557600080fd5b6200085082620007e7565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620008a757835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162000873565b50909695505050505050565b600060208284031215620008c657600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146200080057600080fd5b600080604083850312156200090657600080fd5b6200091183620008cd565b91506200092160208401620007e7565b90509250929050565b6000806000606084860312156200094057600080fd5b6200094b84620008cd565b92506200095b60208501620007e7565b91506200096b60408501620007e7565b90509250925092565b6000602082840312156200098757600080fd5b815180151581146200085057600080fdfe60a06040523480156200001157600080fd5b50604051620024e4380380620024e4833981016040819052620000349162000282565b82836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200009e919081019062000322565b604051602001620000b09190620003da565b604051602081830303815290604052846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000128919081019062000322565b6040516020016200013a91906200041d565b60408051601f1981840301815291905281516200015f906003906020850190620001bf565b50805162000175906004906020840190620001bf565b5050506001600160a01b0316608052600580546001600160401b0392831668010000000000000000026001600160801b031990911692909316919091179190911790555062000484565b828054620001cd9062000447565b90600052602060002090601f016020900481019282620001f157600085556200023c565b82601f106200020c57805160ff19168380011785556200023c565b828001600101855582156200023c579182015b828111156200023c5782518255916020019190600101906200021f565b506200024a9291506200024e565b5090565b5b808211156200024a57600081556001016200024f565b80516001600160401b03811681146200027d57600080fd5b919050565b6000806000606084860312156200029857600080fd5b83516001600160a01b0381168114620002b057600080fd5b9250620002c06020850162000265565b9150620002d06040850162000265565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200030c578181015183820152602001620002f2565b838111156200031c576000848401525b50505050565b6000602082840312156200033557600080fd5b81516001600160401b03808211156200034d57600080fd5b818401915084601f8301126200036257600080fd5b815181811115620003775762000377620002d9565b604051601f8201601f19908116603f01168101908382118183101715620003a257620003a2620002d9565b81604052828152876020848701011115620003bc57600080fd5b620003cf836020830160208801620002ef565b979650505050505050565b60008251620003ee818460208701620002ef565b7f20486f6c646572204469636b20436f6e74657374000000000000000000000000920191825250601401919050565b6000825162000431818460208701620002ef565b632d68646360e01b920191825250600401919050565b600181811c908216806200045c57607f821691505b602082108114156200047e57634e487b7160e01b600052602260045260246000fd5b50919050565b608051612021620004c3600039600081816102b20152818161051c01528181610a04015281816110ad0152818161120801526112f601526120216000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638c6ea7cd1161010f578063c0463711116100a2578063d905777e11610071578063d905777e146104a3578063dd62ed3e146104b6578063e941fa78146104fc578063ef8b30f71461047d57600080fd5b8063c046371114610422578063c63d75b61461044a578063c6e6f5921461047d578063ce96cb771461049057600080fd5b8063a9059cbb116100de578063a9059cbb146103d6578063b3d7f6b9146103e9578063b460af94146103fc578063ba0876521461040f57600080fd5b80638c6ea7cd1461039f57806394bf804d146103a857806395d89b41146103bb578063a457c2d7146103c357600080fd5b806338d52e0f116101875780634cdad506116101565780634cdad5061461030a5780636e553f651461031d57806370a08231146103305780637313ee5a1461036657600080fd5b806338d52e0f1461029857806339509351146102dc578063402d267d146102ef57806344b813961461030257600080fd5b80630a28a477116101c35780630a28a4771461025b57806318160ddd1461026e57806323b872dd14610276578063313ce5671461028957600080fd5b806301e1d114146101f557806306fdde031461021057806307a2d13a14610225578063095ea7b314610238575b600080fd5b6101fd610510565b6040519081526020015b60405180910390f35b6102186105da565b6040516102079190611b8c565b6101fd610233366004611bdd565b61066c565b61024b610246366004611c1f565b61067f565b6040519015158152602001610207565b6101fd610269366004611bdd565b610697565b6002546101fd565b61024b610284366004611c49565b6106ab565b60405160128152602001610207565b60405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610207565b61024b6102ea366004611c1f565b6106d1565b6101fd6102fd366004611c85565b61071d565b6101fd610759565b6101fd610318366004611bdd565b6107bf565b6101fd61032b366004611ca0565b6107cb565b6101fd61033e366004611c85565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6005546103869068010000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610207565b6101fd60065481565b6101fd6103b6366004611ca0565b6107e5565b6102186107ff565b61024b6103d1366004611c1f565b61080e565b61024b6103e4366004611c1f565b6108ef565b6101fd6103f7366004611bdd565b6108fd565b6101fd61040a366004611ccc565b61090a565b6101fd61041d366004611ccc565b61093b565b60055461038690700100000000000000000000000000000000900467ffffffffffffffff1681565b6101fd610458366004611c85565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b6101fd61048b366004611bdd565b610963565b6101fd61049e366004611c85565b610970565b6101fd6104b1366004611c85565b6109a7565b6101fd6104c4366004611d08565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6005546103869067ffffffffffffffff1681565b600061051a610759565b7f00000000000000000000000000000000000000000000000000000000000000006040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190611d32565b6105d59190611d7a565b905090565b6060600380546105e990611d91565b80601f016020809104026020016040519081016040528092919081815260200182805461061590611d91565b80156106625780601f1061063757610100808354040283529160200191610662565b820191906000526020600020905b81548152906001019060200180831161064557829003601f168201915b5050505050905090565b60006106798260006109d2565b92915050565b60003361068d818585610abb565b5060019392505050565b6000806106a383610c6e565b509392505050565b6000336106b9858285610cc1565b6106c4858585610d98565b60019150505b9392505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490919061068d9082908690610718908790611de5565b610abb565b600061072761104b565b610732576000610679565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b60055460009067ffffffffffffffff700100000000000000000000000000000000820481169168010000000000000000900416808201421061079e5760009250505090565b60065481428490038202816107b5576107b5611dfd565b0490039392505050565b6000806106a383611065565b6000806107d784610963565b90506106ca338486846110a8565b6000806107f1846108fd565b90506106ca338483876110a8565b6060600480546105e990611d91565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156108d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6108e48286868403610abb565b506001949350505050565b60003361068d818585610d98565b60006106798260016109d2565b600080600061091886610c6e565b9150915061092581611154565b61093233868689866111bb565b50949350505050565b600080600061094986611065565b9150915061095681611154565b610932338686858a6111bb565b60006106798260006112bc565b6000806106a36109a28473ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b611065565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040812054610679565b6000806109de60025490565b905080156109ff576109fa6109f1610510565b85908386611383565b610ab3565b610ab37f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611e2c565b610a9c90600a611f6f565b60125b610aaa90600a611f6f565b86919086611383565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff8316610b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff8216610c00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60055460009081908190610ca090633b9aca0090610c969067ffffffffffffffff1682611d7a565b8691906001611383565b9050610cad8160016112bc565b9250610cb98482611d7a565b915050915091565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610d925781811015610d85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016108ce565b610d928484848403610abb565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610e3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff8216610ede576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610f94576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681529081208054849290610fd8908490611de5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161103e91815260200190565b60405180910390a3610d92565b600080611056610510565b11806105d55750506002541590565b6000806110738360006109d2565b60055490925061109590839067ffffffffffffffff16633b9aca006001611383565b90506110a18183611d7a565b9150915091565b6110d47f00000000000000000000000000000000000000000000000000000000000000008530856113e5565b6110de83826114c1565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051611146929190918252602082015260400190565b60405180910390a350505050565b80156111b85780611163610759565b61116d9190611de5565b600655600580547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff167001000000000000000000000000000000004267ffffffffffffffff16021790555b50565b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146111f9576111f9838683610cc1565b61120383826115e1565b61122e7f000000000000000000000000000000000000000000000000000000000000000085846117ce565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db85856040516112ad929190918252602082015260400190565b60405180910390a45050505050565b6000806112c860025490565b90508315806112d5575080155b6112e5576109fa81610aaa610510565b610ab36112f46012600a611f6f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e2c565b600080611391868686611824565b905060018360028111156113a7576113a7611f7e565b1480156113c45750600084806113bf576113bf611dfd565b868809115b156113d7576113d4600182611de5565b90505b95945050505050565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610d929085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526118f2565b73ffffffffffffffffffffffffffffffffffffffff821661153e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016108ce565b80600260008282546115509190611de5565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260408120805483929061158a908490611de5565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff8216611684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101561173a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016108ce565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260408120838303905560028054849290611776908490611d7a565b909155505060405182815260009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113e09084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161143f565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000141561187d5783828161187357611873611dfd565b04925050506106ca565b80841161188957600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000611954826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119fe9092919063ffffffff16565b8051909150156113e057808060200190518101906119729190611fad565b6113e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108ce565b6060610ab384846000858573ffffffffffffffffffffffffffffffffffffffff85163b611a87576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ce565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ab09190611fcf565b60006040518083038185875af1925050503d8060008114611aed576040519150601f19603f3d011682016040523d82523d6000602084013e611af2565b606091505b5091509150611b02828286611b0d565b979650505050505050565b60608315611b1c5750816106ca565b825115611b2c5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce9190611b8c565b60005b83811015611b7b578181015183820152602001611b63565b83811115610d925750506000910152565b6020815260008251806020840152611bab816040850160208701611b60565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b600060208284031215611bef57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611c1a57600080fd5b919050565b60008060408385031215611c3257600080fd5b611c3b83611bf6565b946020939093013593505050565b600080600060608486031215611c5e57600080fd5b611c6784611bf6565b9250611c7560208501611bf6565b9150604084013590509250925092565b600060208284031215611c9757600080fd5b6106ca82611bf6565b60008060408385031215611cb357600080fd5b82359150611cc360208401611bf6565b90509250929050565b600080600060608486031215611ce157600080fd5b83359250611cf160208501611bf6565b9150611cff60408501611bf6565b90509250925092565b60008060408385031215611d1b57600080fd5b611d2483611bf6565b9150611cc360208401611bf6565b600060208284031215611d4457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611d8c57611d8c611d4b565b500390565b600181811c90821680611da557607f821691505b60208210811415611ddf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008219821115611df857611df8611d4b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060208284031215611e3e57600080fd5b815160ff811681146106ca57600080fd5b600181815b80851115611ea857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611e8e57611e8e611d4b565b80851615611e9b57918102915b93841c9390800290611e54565b509250929050565b600082611ebf57506001610679565b81611ecc57506000610679565b8160018114611ee25760028114611eec57611f08565b6001915050610679565b60ff841115611efd57611efd611d4b565b50506001821b610679565b5060208310610133831016604e8410600b8410161715611f2b575081810a610679565b611f358383611e4f565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611f6757611f67611d4b565b029392505050565b60006106ca60ff841683611eb0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060208284031215611fbf57600080fd5b815180151581146106ca57600080fd5b60008251611fe1818460208701611b60565b919091019291505056fea2646970667358221220b177bd7d3b8a81355a8f796a397df571979302027f29d59e65283e16cc49b4b264736f6c634300080c0033a26469706673582212206ea310e750a657b3d84483138fece72ddd6608c606f7e2b92ffb6cc71acd42ee64736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Core Team",
    "kind": "dev",
    "methods": {
      "getAllHDCContracts()": {
        "details": "Helper for UIs"
      }
    },
    "title": "HDCFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "coreBorrow()": {
        "notice": "Address used for Access control"
      },
      "deployHDC(address,uint64,uint64)": {
        "notice": "Deploys a HDC contract for `asset` with withdrawal fees of `fees` and a vesting period of `vestingPeriod`"
      },
      "getAllHDCContracts()": {
        "notice": "Returns all the HDC contracts"
      },
      "getHDCAddress(address,uint64)": {
        "notice": "Get the HDC contract address associated to the pair (`asset`, `fees`)"
      },
      "hdcContractList(uint256)": {
        "notice": "List of all HDC contract addresses"
      },
      "hdcFactory(address,uint64)": {
        "notice": "Maps pairs of (asset address, fee value) to the address of the corresponding holder dick contest"
      },
      "supportedFees(uint64)": {
        "notice": "Maps a fee value to whether it is supported or not"
      },
      "supportedVestingPeriods(uint64)": {
        "notice": "Maps a vesting period to whether it is supported or not"
      },
      "toggleUint64(uint64,bytes32)": {
        "notice": "Toggles support for a fee or a vesting period"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3643,
        "contract": "contracts/HDCFactory.sol:HDCFactory",
        "label": "coreBorrow",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICoreBorrow)4336"
      },
      {
        "astId": 3650,
        "contract": "contracts/HDCFactory.sol:HDCFactory",
        "label": "hdcFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint64,t_address))"
      },
      {
        "astId": 3655,
        "contract": "contracts/HDCFactory.sol:HDCFactory",
        "label": "supportedFees",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 3660,
        "contract": "contracts/HDCFactory.sol:HDCFactory",
        "label": "supportedVestingPeriods",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 3664,
        "contract": "contracts/HDCFactory.sol:HDCFactory",
        "label": "hdcContractList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICoreBorrow)4336": {
        "encoding": "inplace",
        "label": "contract ICoreBorrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint64,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint64 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_address)"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}